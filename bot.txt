exclusive
snapshot
snapshot

import bot_settings.txt INITIALIZE
import button_settings.txt INITIALIZE

register MVPEXP_CHECK
assign MVPEXP_CHECK true

register TIMER_1 with dur on
register TIMER_2 with dur on
register TIMER_3 with dur on

register SKILL_1 with row col thold on
register SKILL_2 with row col thold on
register SKILL_3 with row col thold on
register SKILL_4 with row col thold on
register SKILL_5 with row col thold on

register TURN_AROUND_PERCENTAGE

register JUMP_STYLE
register JUMP_UP_PERCENTAGE
register JUMP_DN_PERCENTAGE
register JUMP_DISABLE_COUNT


################################################################

assign MINIMAP.lt 0
assign MINIMAP.tp 60
assign MINIMAP.rt 220
assign MINIMAP.bm 150

assign LAYOUT.lt 30
assign LAYOUT.rt 130
assign LAYOUT.tf 700
assign LAYOUT.bc 0

assign POTION_HUD_TYPE 1
assign POTION_HP_THOLD 40
assign POTION_MP_THOLD 10

assign TURN_AROUND_PERCENTAGE 10

assign JUMP_STYLE 0
assign JUMP_UP_PERCENTAGE 50
assign JUMP_DN_PERCENTAGE 50
assign JUMP_DISABLE_COUNT 2

# Let's motor.
assign MONITOR_DELAY 100

alias [PLAYER] among "bot_union.txt" "bot_gyom.txt" "bot_kong.txt" "bot_dalkom.txt" "bot_onepunch.txt" "bot_komang.txt" "bot_amber.txt"
import [PLAYER] SETUP


################################################################

register _BLOB with x y width height num lt tp rt bm
register _SPR with x y
register _READ with x y
register _IN with id stat x y
register _RANDOM
register _PREV with x y
register _STP with h v

register STATUS_MOVING_RIGHT
register STATUS_JUMPING_UP
register STATUS_TURNED_AROUND
register STATUS_JUMP_SKIPPED
register STATUS_HORZ_STOPPED
register STATUS_VERT_STOPPED
register STATUS_ACTION


import bot_settings.txt INIT_SCREEN
when SCREEN_ENABLED is true
	sound cool
	delay for 1000
end

sync
	import bot_settings.txt LOCATE_POTIONBAR
	when POTION_BAR is less than 0
		finish sync
	end
	import bot_settings.txt LOCATE_SKILLBAR
	when SKILL_BAR is less than 0
		finish sync
	end

	iterate forever
	
		snapshot
		
		# =========================================================
		# Check skill activeness
		# =========================================================
		when SKILL_1.row is greater than 0
			assign SKILL_INDEX.row computing SKILL_1.row sub 1
			assign SKILL_INDEX.col computing SKILL_1.col sub 1
			import bot_settings.txt CHECK_SKILL
			when SKILL_TEST is true
				when SKILL_1.thold is greater than 5
					assign SKILL_1.on true
					assign SKILL_1.thold 0
				end
				assign SKILL_1.thold computing SKILL_1.thold add 1
			otherwise
				assign SKILL_1.thold 0
			end
		end
		
		when SKILL_2.row is greater than 0
			assign SKILL_INDEX.row computing SKILL_2.row sub 1
			assign SKILL_INDEX.col computing SKILL_2.col sub 1
			import bot_settings.txt CHECK_SKILL
			when SKILL_TEST is true
				when SKILL_2.thold is greater than 5
					assign SKILL_2.on true
					assign SKILL_2.thold 0
				end
				assign SKILL_2.thold computing SKILL_2.thold add 1
			otherwise
				assign SKILL_2.thold 0
			end
		end

		when SKILL_3.row is greater than 0
			assign SKILL_INDEX.row computing SKILL_3.row sub 1
			assign SKILL_INDEX.col computing SKILL_3.col sub 1
			import bot_settings.txt CHECK_SKILL
			when SKILL_TEST is true
				when SKILL_3.thold is greater than 5
					assign SKILL_3.on true
					assign SKILL_3.thold 0
				end
				assign SKILL_3.thold computing SKILL_3.thold add 1
			otherwise
				assign SKILL_3.thold 0
			end
		end

		when SKILL_4.row is greater than 0
			assign SKILL_INDEX.row computing SKILL_4.row sub 1
			assign SKILL_INDEX.col computing SKILL_4.col sub 1
			import bot_settings.txt CHECK_SKILL
			when SKILL_TEST is true
				when SKILL_4.thold is greater than 5
					assign SKILL_4.on true
					assign SKILL_4.thold 0
				end
				assign SKILL_4.thold computing SKILL_4.thold add 1
			otherwise
				assign SKILL_4.thold 0
			end
		end

		when SKILL_5.row is greater than 0
			assign SKILL_INDEX.row computing SKILL_5.row sub 1
			assign SKILL_INDEX.col computing SKILL_5.col sub 1
			import bot_settings.txt CHECK_SKILL
			when SKILL_TEST is true
				when SKILL_5.thold is greater than 5
					assign SKILL_5.on true
					assign SKILL_5.thold 0
				end
				assign SKILL_5.thold computing SKILL_5.thold add 1
			otherwise
				assign SKILL_5.thold 0
			end
		end

		# =========================================================
		# Check player position
		# =========================================================
		import bot_settings.txt LOCATE_PLAYER
		when PLAYER_POS.x is not below 0
			when _PREV.x is equal to PLAYER_POS.x
				assign STATUS_HORZ_STOPPED true
			otherwise
				assign STATUS_HORZ_STOPPED false
			end			
			assign _PREV.x PLAYER_POS.x
			when PLAYER_POS.x is less than LAYOUT.lt
				when STATUS_MOVING_RIGHT is false
					assign STATUS_TURNED_AROUND true
				end
				assign STATUS_MOVING_RIGHT true
			end
			when PLAYER_POS.x is greater than LAYOUT.rt
				when STATUS_MOVING_RIGHT is true
					assign STATUS_TURNED_AROUND true
				end
				assign STATUS_MOVING_RIGHT false
			end
		end
		
		when PLAYER_POS.y is not below 0
			when _PREV.y is equal to PLAYER_POS.y
				assign STATUS_VERT_STOPPED true
			otherwise
				assign STATUS_VERT_STOPPED false
			end
			assign _PREV.y PLAYER_POS.y
			when PLAYER_POS.y is less than LAYOUT.tf
				assign STATUS_JUMPING_UP false
			end
			when PLAYER_POS.y is greater than LAYOUT.bc
				assign STATUS_JUMPING_UP true
			end
		end
		
		import [PLAYER] SPECIAL_CHECK
		
		delay for MONITOR_DELAY
	end
	
with

	iterate forever
	
		# =========================================================
		# Perform timer action
		# =========================================================
		when TIMER_1.on is true
			import [PLAYER] TIMER_1
			assign TIMER_1.on false
		end

		when TIMER_2.on is true
			import [PLAYER] TIMER_2
			assign TIMER_2.on false
		end

		when TIMER_3.on is true
			import [PLAYER] TIMER_3
			assign TIMER_3.on false
		end
		
		# =========================================================
		# Use active skill
		# =========================================================
		when SKILL_1.on is true
			import [PLAYER] SKILL_1
			assign SKILL_1.on false
		end

		when SKILL_2.on is true
			import [PLAYER] SKILL_2
			assign SKILL_2.on false
		end

		when SKILL_3.on is true
			import [PLAYER] SKILL_3
			assign SKILL_3.on false
		end

		when SKILL_4.on is true
			import [PLAYER] SKILL_4
			assign SKILL_4.on false
		end

		when SKILL_5.on is true
			import [PLAYER] SKILL_5
			assign SKILL_5.on false
		end

		# =========================================================
		# Control player movement
		# =========================================================
		assign STATUS_ACTION 1
		assign _RANDOM random over 100
		when _RANDOM is less than TURN_AROUND_PERCENTAGE		
			when STATUS_MOVING_RIGHT is true
				assign STATUS_MOVING_RIGHT false
			otherwise
				assign STATUS_MOVING_RIGHT true
			end
		end

		when STATUS_JUMP_SKIPPED is greater than JUMP_DISABLE_COUNT		
			when JUMP_STYLE is equal to 0
				#
				# Random jump
				#
				assign _RANDOM random over 100
				when STATUS_JUMPING_UP is true
					when _RANDOM is less than JUMP_UP_PERCENTAGE
						assign STATUS_JUMP_SKIPPED 0
						assign STATUS_ACTION 2
					end
				otherwise
					when _RANDOM is less than JUMP_DN_PERCENTAGE
						assign STATUS_JUMP_SKIPPED 0
						assign STATUS_ACTION 3
					end
				end
				
			otherwise
				#
				# Cyclic jump
				#
				when STATUS_TURNED_AROUND is true
					assign STATUS_TURNED_AROUND false
					assign STATUS_JUMP_SKIPPED 0
					when STATUS_JUMPING_UP is true
						assign STATUS_ACTION 2
					otherwise
						assign STATUS_ACTION 3
					end	
				end
			end		
		end		
		assign STATUS_JUMP_SKIPPED computing STATUS_JUMP_SKIPPED add 1
	
		import [PLAYER] SPECIAL_ACTION
		
		when STATUS_ACTION is equal to 1
			import [PLAYER] ATTACK
		end

		when STATUS_ACTION is equal to 2
			import [PLAYER] SOAR
		end

		when STATUS_ACTION is equal to 3
			import [PLAYER] FALL
		end
		
	end

with
	# =========================================================
	# Elapse timer
	# =========================================================	
	sub
		register _DURATION
		when TIMER_1.dur is greater than 0
			assign _DURATION computing TIMER_1.dur mul 1000
			iterate forever	
				delay for _DURATION
				assign TIMER_1.on true
			end
		end
	end
	
with
	sub
		register _DURATION
		when TIMER_2.dur is greater than 0
			assign _DURATION computing TIMER_2.dur mul 1000
			iterate forever	
				delay for _DURATION
				assign TIMER_2.on true
			end
		end
	end

with
	sub
		register _DURATION
		when TIMER_3.dur is greater than 0
			assign _DURATION computing TIMER_3.dur mul 1000
			iterate forever	
				delay for _DURATION
				assign TIMER_3.on true
			end
		end
	end
	# =========================================================

with
	# =========================================================
	# Drink potion
	# =========================================================	
	iterate forever
		import bot_settings.txt CHECK_POTION
		when POTION_TEST is true
			key f1 for 100
			delay for 700
		otherwise
			delay for 500
		end
	end

with
	# =========================================================
	# Click buttons
	# =========================================================	
	iterate forever
		#import button_settings.txt CLICK_OKAY
		import button_settings.txt CLICK_REWARD
		delay for 1000
	end

with
	# =========================================================
	# Check screen
	# =========================================================	
	iterate forever
		import bot_settings.txt CHECK_MAPOUT
		when MAPOUT_TEST is true
			finish sync
		end
		delay for 250
	end

with
	iterate forever
		import bot_settings.txt CHECK_STONE
		when STONE_TEST is true
			iterate 2 times
				sound alert
				iterate 10 times
					key left for 100
					key right for 100
				end
			end
		otherwise
			delay for 1000
		end
	end

with
	iterate forever
		import bot_settings.txt CHECK_CURSE
		when CURSE_TEST is true
			sound buzz
			delay for 500
		end
		delay for 1000
	end

with
	iterate forever
		import bot_settings.txt CHECK_ELITEBOSS
		when ELITEBOSS_TEST is true
			sound dingdong
			delay for 500
		end
		delay for 1000
	end
	
with
	register _SCREEN_COUNT
	iterate forever
		import bot_settings.txt CHECK_SCREEN
		when SCREEN_TEST is true
			increase _SCREEN_COUNT
			when _SCREEN_COUNT is greater than 2
				when _SCREEN_COUNT is greater than 7
					# Serious notification
					sound alert
				otherwise
					# Minor notification
					sound plus
				end
				delay for 500
			end
		otherwise
			assign _SCREEN_COUNT 0
		end
		delay for 1000
	end
	
with
	register _MVPEXP_COUNT
	iterate forever
		when MVPEXP_CHECK is false
			finish iterate
		end
		import bot_settings.txt CHECK_MVPEXP
		when MVPEXP_TEST is true
			when _MVPEXP_COUNT is less than 5
				increase _MVPEXP_COUNT
				sound coin
				delay for 500
			end
		otherwise
			assign _MVPEXP_COUNT 0
		end
		delay for 1000
	end
	# =========================================================
end

#sound alert
sound cool
